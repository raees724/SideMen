var db = require('../config/connection')
var collection = require('../config/collection');
const { CATEGORY_COLLECTION } = require('../config/collection');
const { response } = require('../app');
var objectId = require('mongodb').ObjectId

module.exports = {
    get_category_list: (req) => {
        return new Promise(async (resolve, reject) => {
            var category_list = await db.get().collection(collection.CATEGORY_COLLECTION).find().toArray()
            resolve(category_list)
        })
    },
    add_category: (data) => {
        return new Promise(async (resolve, reject) => {
            db.get().collection(collection.CATEGORY_COLLECTION).insertOne(data).then((response) => {
                resolve("sucsusses add new category")

            })
        })
    },
    delete_category: (id) => {
        return new Promise(async (resolve, reject) => {
            await db.get().collection(collection.CATEGORY_COLLECTION).deleteOne({ _id: objectId(id) }).then((response) => {
                resolve("sucsusses deleted  category")


            })


        })

    },
    updateCategory: (categoryId, categoryList) => {
        console.log(categoryList,"fdgdfhb");
        return new Promise((resolve, reject) => {
            db.get().collection(collection.CATEGORY_COLLECTION).updateOne({ _id: objectId(categoryId) }, {$set: { category: categoryList.category }
                }).then((response) => {
                    resolve(`successfully edited`)
                })
        })
    },
    getCategoryDetails:(proId)=>{
        return new Promise((resolve,reject)=>{
            db.get().collection(collection.CATEGORY_COLLECTION).findOne({_id:objectId(proId)}).then((product)=>{
                resolve(product)
            })
        })

    },
    getAllCategory: () => {
        return new Promise(async (resolve, reject) => {
            let category = await db.get().collection(collection.CATEGORY_COLLECTION).find().toArray()
            resolve(category)
        })
    },
    getAllCategoryProduct: (categoryID)=>{
        return new Promise(async(resolve,reject)=>{
            let products = await db.get().collection(collection.PRODUCT_COLLECTION).find({category:categoryID}).toArray()
            resolve(products)
        })
    },
    getCategory: (catID)=>{
        return new Promise(async(resolve,reject)=>{
            let category = await db.get().collection(collection.CATEGORY_COLLECTION).findOne({_id:objectId(catID)})
            
            resolve(category)
        })
    }


}


//Product helpers
var db = require('../config/connection')
var collection = require('../config/collection');
const bcrypt = require('bcrypt')
const { MongoCompatibilityError } = require('mongodb');
var objectId = require('mongodb').ObjectId
module.exports = {
    addProduct: (productData) => {
        return new Promise(async(resolve,reject)=>{
            db.get().collection(collection.PRODUCT_COLLECTION).insertOne(productData).then((data) => {
            console.log('It is',data)
            resolve(data.insertedId)
            })
        })
    },
    

    getAllProduct: () => {
        return new Promise(async (resolve, reject) => {
            let products = await db.get().collection(collection.PRODUCT_COLLECTION).find().toArray()
            resolve(products)
        })
    },

    deleteProduct: (productId) => {
        return new Promise((resolve, reject) => {
            db.get().collection(collection.PRODUCT_COLLECTION).deleteOne({ _id: objectId(productId) }).then((response) => {
                resolve(response)
            })
        })
    },
    getProductDetails: (productId) => {
        return new Promise((resolve, reject) => {
            
                db.get().collection(collection.PRODUCT_COLLECTION).findOne({ _id: objectId(productId) }).then((product) => {
                    console.log(product)
                    resolve(product)
                })
            
        })
    },
    updateProduct: (productId, productDetails) => {
        var statuss = null
        return new Promise((resolve, reject) => {
            db.get().collection(collection.PRODUCT_COLLECTION)
                .updateOne({ _id: objectId(productId) }, {
                    $set: {
                        Name: productDetails.Name,
                        category: productDetails.category,
                        discriptions: productDetails.discriptions,
                        stock:productDetails.stock,
                        price:productDetails.price
                    }
                }).then((response) => {
                    console.log('dfhgjhkjkj',response)
                    resolve(`successfully edited`)
                })
        })
    },
    changeStatus: function (id) {
        return new Promise(async function (resolve, reject) {
            let product = await db.get().collection(collection.USER_COLLECTION).findOne({ _id: objectId(id) })
            if (product.blocked == true) {
                db.get().collection(collection.USER_COLLECTION).updateOne({ _id: objectId(id) }, {
                    $set: {
                        blocked: false
                    }
                }).then(() => {
                    resolve("unblocked")
                })
            } else {
                db.get().collection(collection.USER_COLLECTION).updateOne({ _id: objectId(id) }, {
                    $set: {
                        blocked: true
                    }
                }).then((response) => {
                    resolve("blocked")
                })
            }
        })
    }
}



//user

var express = require('express');
const { response } = require('../app');
const adminHelpers = require('../helpers/admin-helpers');
const productHelpers = require('../helpers/product-helpers')
const categoryHelpers = require('../helpers/category-helpers')
const userHelpers = require('../helpers/user-helpers');
const configTwilio=require('../config/twillio');
var router = express.Router();
const client = require('twilio')(configTwilio.accountSID, configTwilio.authToken,configTwilio.serviceSID);
let phone


const verifyLogin=(req,res,next)=>{
  if(req.session.loggedIn){
    next()
  }else{
    res.redirect('/login')

  }

}

router.use((req, res, next) => {
  res.set('Cache-Control', 'no-store')
  next()
})


router.get('/user-main',async(req, res, next)=>{

  let users=req.session.user

  let category = await categoryHelpers.getAllCategory()
  productHelpers.getAllProduct().then((products) => {
    products.forEach(async element => {
      console.log(element.category);
      let catName = await categoryHelpers.getCategory(element.category)
      element.catName = catName.category
    });
    res.render('user/main',{user:true,category,products,users});//<=user
  })

});

var otpNumberErr = null


/* GET home page. */
router.get('/', async (req, res)=> {

  let users=req.session.user
  let category = await categoryHelpers.getAllCategory()
  console.log("hdbchhj :",category);
  // if(req.session.user){
    console.log("insaid if");
    // let products = await productHelpers.getAllProduct()
    productHelpers.getAllProduct().then((products) => {
      products.forEach(async element => {
        console.log(element.category);
        let catName = await categoryHelpers.getCategory(element.category)
        element.catName = catName.category
      });
      console.log('prdts = ',products);
    res.render('user/main',{user:true,category,products,users});
    })
  // }else{
    // res.redirect('/user-main')
  // }
});



router.get('/login',function(req, res, next) {
  if(req.session.loggedIn){
    res.redirect('/')
  }else{
    res.render('user/login',{loginErr:req.session.logginErr,otpUserBlock : req.session.blockErr,invalidUser : req.session.invalidUser,blockErr:req.session.blockError});
    req.session.blockErr = false
    req.session.logginErr=false
    req.session.invalidUser = false
    req.session.blockError= false
  }
});

// router.post('/login',(req,res)=>{
//   userHelpers.doLogin(req.body).then((response)=>{
//     if(response.status){
//       res.redirect('/')
//     }else{
//       req.session.loginnErr="invalid user name or password"
//       res.redirect('/login')
//     }
//   })
//   res.redirect('/')
// })

router.post('/login', (req, res) => {
  userHelpers.doLogin(req.body).then((response) => {// do login pass cheyyumbo req,body  pass cheyth data do login k varunnu
    if (response.isblocked) {
      req.session.blockError = "user blocked"     //user block ankill login page kanikum
      res.redirect('/login')
    }
    else if (response.status) {
      req.session.loggedIn = true
      req.session.user = response.user    //user undakill home 
    
      res.redirect('/user-main')
    } else {
      req.session.logginErr = "Invalid Username or Password"
      res.redirect('/login')  // illathe user keranakill logon k thannne
    }
  })
})




router.get('/signup', function(req, res, next) {
  res.render('user/signup');
});


router.post('/signup',(req,res)=>{
  userHelpers.doSignup(req.body).then((response)=>{
    if(response.statuss){
      res.redirect('/login')
    }else{
      res.redirect('/signup')
    }
  })

})





router.get('/product-view',(req,res)=>{
  let users=req.session.user
  res.render('user/product-view',{user:true,users})
})


router.get('/otp',(req,res)=>{

  res.render('user/otp',{otpErr:req.session.invalidOtpError})
})

router.post('/get-otp',(req,res)=>{
   phone=req.body.phone
  
   userHelpers.verifyPhone(phone).then(()=>{
    client.verify
    .services(configTwilio.serviceSID)
    .verifications.create({
      to: `+91${phone}`,
      channel: "sms"
    }).then((response) => {
      console.log(response.user );
        res.redirect('/otp')
    }).catch((e) => {
      console.log(e);
      console.log('failedd');
    })
   }).catch((response)=>{
    if(response.nouser){
      req.session.invalidUser= "invalid number"
      res.redirect('/login')

    }else{

      req.session.blockErr="user blocked"
      res.redirect('/login')

    }
   })

})
router.post('/submit-otp', (req, res) => {

  userHelpers.verifyOTP(phone).then((response)=>{
  let otp = req.body.otp
  let users=req.body.user

  client.verify
    .services(configTwilio.serviceSID)
    .verificationChecks.create({
      to: `+91${phone}`,
      code: otp
    }).then((response) => {
      console.log(response);
      let valid = response.valid
      if (valid) {  
        req.session.user = true
        req.session.user=response
        res.redirect('/')
      } else {
        req.session.invalidOtpError = true
        res.redirect('/otp')
      }
    }).catch((err) => {
      console.log(err);
    })
  })
})



router.get('/all-product',verifyLogin,async (req, res) => {
  let category = await categoryHelpers.getAllCategory()
  let users=req.session.user


  productHelpers.getAllProduct().then((products)=>{
    console.log('prts = ',products);
    res.render('user/all-product', { user: true ,products,category,users})
  })  
  
  
  
  })
  
  


router.get('/logout', (req, res) => {
req.session.loggedIn = null
req.session.user = null
res.redirect('/')
})

/////////////////

router.get('/show-category/:id',verifyLogin,async(req,res)=>{
  
let category = await categoryHelpers.getAllCategory()
let users=req.session.user
let oneCat = await categoryHelpers.getCategory(req.params.id)
let products =  await categoryHelpers.getAllCategoryProduct(req.params.id)
console.log(category);
res.render('user/all-product',{user:true,login:true,products,category,oneCat,users});
})

//edit ucha
router.get('/product-view/:id',async(req,res)=>{
let id = req.params.id
let category = await categoryHelpers.getAllCategory()
let onePro =await productHelpers.getAllProduct(req.params.id)
let users=req.session.user
productHelpers.getProductDetails(id).then((product)=>{
  res.render('user/product-view',{user:true,product,category,onePro,users})


})
})


module.exports = router;



//admin
var express = require('express');
var router = express.Router();
const adminHelpers = require('../helpers/admin-helpers')
const userHelpers = require('../helpers/user-helpers')
const productHelpers = require('../helpers/product-helpers')
const categoryHelpers = require('../helpers/category-helpers');
const { render } = require('../app');
// var signupErr=null
// var statuss=nul
const verifyLogin1 = (req, res, next) => {
  if (req.session.adminLoggedIn) {
    next()
  } else {
    res.redirect('/admin')

  }

}

const credentials = {
  email: "admin@gmail.com",
  password: "admin"
}

/* GET users listing. */
router.get('/', function (req, res, next) {
  if (req.session.adminLoggedIn) {
    res.render('admin/admin-dashboard', { admin: true });
  } else {
    res.redirect('/admin/admin-login')
  }

  // res.render('admin/list-user', { admin: true})
});


router.get('/admin-login', (req, res) => {
  if (req.session.adminLoggedIn) {
    res.redirect('/admin')
  } else {
    res.render('admin/admin-login',{adminErr:req.session.adminLoginError})
    req.session.adminLoginError=false

  }

})


router.post('/adminlogin', function (req, res) {
  if (req.body.Email == credentials.email && req.body.Password == credentials.password) {
    req.session.adminLoggedIn = true;
    req.session.admin = req.body.email;
    res.redirect('/admin');
    // console.log(req.session);
  }
  else {
    console.log("admin not logged in");
    req.session.adminLoginError="Invalid Username or Password"
    res.redirect('/admin')
  }
})


router.get('/admin-dashboard',verifyLogin1, (req, res) => {

  res.render('admin/admin-dashboard', { admin: true })


})


//
router.get('/list-product',verifyLogin1, (req, res) => {
  console.log('asdfafoff');
  productHelpers.getAllProduct().then((products) => {
    products.forEach(async element => {
      let catName = await categoryHelpers.getCategory(element.category)
      if(catName){
        element.catName = catName.category
      }
    });
    res.render('admin/list-product', { admin: true, products })
  })

})


// router.get('/list-product', (req, res, )=> {
//   res.render('admin/list-product',{admin:true});
// });
// router.get('/add-product', (req, res)=> {
//   res.render('admin/add-product',{admin:true});
// });
// router.get('/edit-product', (req, res, )=> {
//   res.render('admin/edit-product',{admin:true});
// });


// router.get('/list-category', (req, res)=> {
//   res.render('admin/list-category',{admin:true});
// });
// router.get('/add-category', (req, res)=> {
//   res.render('admin/add-category',{admin:true});
// });
// router.get('/edit-category', (req, res)=> {
//   res.render('admin/edit-category',{admin:true});
// });


// router.get('/list-user', (req, res)=> {
//   res.render('admin/list-user',{admin:true});
// });


router.get('/list-user', (req, res) => {
  userHelpers.getAllUsers().then((users) => {


    res.render('admin/list-user', { admin: true, users })

  })
})

router.get('/list-category', async (req, res) => {
  console.log('jhfjytfj');   
  let category = await categoryHelpers.get_category_list()
  console.log(category);

  res.render('admin/list-category', { admin: true, category },)


})


router.get('/add-category', (req, res) => {
  res.render('admin/add-category', { admin: true })
})
router.post('/add-category', (req, res) => {
  console.log(req.body);
  categoryHelpers.add_category(req.body).then((data) => {
    res.redirect('/admin/list-category')
  })

})

router.get('/add-product', async (req, res) => {
  let category = await categoryHelpers.get_category_list()
  res.render('admin/add-product', { admin: true, category })

})


router.post('/add-product', function (req, res) {
  console.log(req.body);
  console.log(req.files.image1.name);
  console.log('image name = ',req.files.image1);
  const prdtDetails = {
    Name : req.body.Name,
    price: req.body.price,
    discriptions : req.body.discriptions,
    stock: req.body.stock,
    category: req.body.category,
    image1 : req.files.image1.name,
    image2 : req.files.image2.name,
    image3 : req.files.image3.name,
    image4 : req.files.image4.name
    }
  productHelpers.addProduct(prdtDetails).then((data) => {
    let image1 = req.files.image1
    let image2 = req.files.image2
    let image3 = req.files.image3
    let image4 = req.files.image4
    console.log('image = ',image1);
    image1.mv(`./public/assets/product-images/${data}1.jpg`, (err, done) => {
    })
    image2.mv(`./public/assets/product-images/${data}2.jpg`, (err, done) => {
    })
    image3.mv(`./public/assets/product-images/${data}3.jpg`, (err, done) => {
    })
    image4.mv(`./public/assets/product-images/${data}4.jpg`, (err, done) => {
    })

    res.redirect('/admin/list-product')
  })
})


//delete product

router.get('/delete-product/:id', (req, res) => {
  let proId = req.params.id
  console.log(proId);
  productHelpers.deleteProduct(proId).then((response) => {
    res.redirect('/admin/list-product')
  })



})

// delete category

router.get('/delete-category/:id', (req, res) => {
  let proId = req.params.id
  console.log(proId);
  categoryHelpers.delete_category(proId).then((response) => {
    res.redirect('/admin/list-category')
  })

})
router.get('/edit-category/:id', async (req, res) => {
  // try {
  //   if (req.session.adminLoggedIn) {
  console.log('here here hrerr')
  let category = await categoryHelpers.getCategoryDetails(req.params.id)

  console.log(req.params.id)
  console.log(category)
  res.render('admin/edit-category', { category, admin: true })
  admin__msg = ''

})
// } catch (error) {
//   res.redirect('/error')
// }


// })

router.post('/edit-category/:id', (req, res) => {
  console.log(req.body, "out said");
  categoryHelpers.updateCategory(req.params.id, req.body).then((response) => {
    console.log(req.body);
    // if (response) {
    res.redirect('/admin/list-category')
    // // } else {
    //   res.redirect(`/admin/edit-category/${req.params.id}`)
    // }
  })
})


router.get('/edit-product/:id', async (req, res) => {
  console.log('here here hrerr')
  // if (req.session.admin) {
  let product = await productHelpers.getProductDetails(req.params.id)
  let category = await categoryHelpers.get_category_list()

  console.log(req.params.id)
  console.log(product)
  res.render('admin/edit-product', { product, category, admin: true })
  // signupErr = null
  // }).catch((err)=>{
  //   console.log('hereeeeebug')

})
//   } else {
//     res.redirect('/admin/list-product')
//   }
// })

router.post('/edit-product/:id', (req, res) => {
  let data = req.params.id
  productHelpers.updateProduct(data, req.body).then(async (response) => {
    try {
      // if (req.files.image) {
      //   let image = req.files.image
      //   await image.mv(`./public/product-image/${data}.png`, (err, succ) => {
      //     if (err) {
      //       console.warn(err)
      //     } {
      //       console.log('success')
      //     }
      //   })
      // }
      if (req.files.image1) {
        let image1 = req.files.image1
        await image1.mv(`./public/assets/product-images/${data}1.jpg`, (err, succ) => {
          if (err) {
            console.warn(err)
          } else {
            console.log('success')
          }
        })
      }
      if (req.files.image2) {
        let image2 = req.files.image2
        await image2.mv(`./public/assets/product-images/${data}2.jpg`, (err, succ) => {
          if (err) {
            console.warn(err)
          } {
            console.log('success')
          }
        })
      }
      if (req.files.image3) {
        let image3 = req.files.image3
        await image3.mv(`./public/assets/product-images/${data}3.jpg`, (err, succ) => {
          if (err) {
            // console.warn(err)t-product
          } {
            console.log('success')
          }
        })
      }
      if (req.files.image4) {
        let image4 = req.files.image4
        await image4.mv(`./public/assets/product-images/${data}4.jpg`, (err, succ) => {
          if (err) {
            console.warn(err)
          } {
            console.log('success')
          }
        })
      }
      res.redirect('/admin/list-product')
    }
    catch (err) {
      res.redirect('/admin/list-product')
    }
  })
})






router.get('/changestatus', (req, res) => {
  console.log('hhhhhhhhhh')
  productHelpers.changeStatus(req.query.id).then((response) => {
    admin__msg = response
    res.redirect('/admin/list-user')
  })
})






router.get('/adminlogout', (req, res) => {
  console.log('h')
  req.session.admin = null
  req.session.adminLoggedIn = null
  req.session.adminLoginError = null
  res.redirect('/admin')
})
module.exports = router;


